name: Release on Version Change

on:
  push:
    branches: [ main ]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Get version from build.gradle
        id: get_version
        run: |
          VERSION=$(grep "^version =" build.gradle | awk '{print $3}' | tr -d "'\"")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if release already exists
        id: check_release
        uses: actions/github-script@v7
        with:
          script: |
            const version = process.env.VERSION || require('fs').readFileSync('build.gradle', 'utf8').match(/^version = ['\"]?([0-9a-zA-Z\.-]+)['\"]?/m)[1];
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const exists = releases.data.some(r => r.tag_name === `v${version}`);
            core.setOutput('exists', exists);
        env:
          VERSION: ${{ steps.get_version.outputs.version }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        if: steps.check_release.outputs.exists == 'false'
        run: ./gradlew build --no-daemon

      - name: Create Release and Upload JAR
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          generate_release_notes: true
          files: build/libs/SetHome-${{ steps.get_version.outputs.version }}.jar
